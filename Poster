\begin{document}

\section{The Problem}
SCADA (Supervisory Control and Dada Acquisition) Systems play a vital role in the infrastructure of modern day society.  They provide a convenient way to control and a multitude of systems/data that make everyday life possible.  These systems include water treatment facilities, oil pipelines, electrical power transmission stations and HVAC systems.  Many of these systems however are run on older technology that have been customized to meet the specific needs of the facility or company they reside in.  Because of this, SCADA systems are often prone to attack due to the impact disrupting even one could bring to a company or region of a country.  Due to this threat Alliant Energy has reached out to ISU to provide a way of monitoring 28 of their power substations via a low-interaction SCADA honeypot system.

\section{Proposed Solution}
In order to protect Alliant’s SCADA networks our solution was to use a Raspberry Pi to create a cheap effective passive honeypot system with a small intrusion detection system.  They software developed for this project allows the device that sits within each substation to monitor common communication protocols such as SSH, HTTP/HTTPS, and DNP3.  Because of where the device lies within the network it should never receive a legitimate connection.  Any attempts to connect will be blocked and reported to Alliant’s administrative staff.

\section{Functional Requirements}
\begin{itemize}
    \item The system must interface with SSH, HTTP, HTTPS and DNP3 protocols
    \item HTTP and HTTPS will have a fake login page with key logger to record login attempts
    \item Must have the ability to record logs of all connection attempts
    \item Each device must come equipped with a small Intrusion Detection System (IDS)
    \item System sends alerts to administrative personnel upon detection of irregularities which include but are not limited to increased ICMP traffic, port scans and repeated attempts to connect to URL’s
    \item The system must be easy to remotely configure and modify to accommodate new rules
\end{itemize}

\section{Non-Functional Requirements}
\begin{itemize}
	\item The system must be low-maintenance
	\item Needs to be a standalone device
	\item Must have low power consumption
	\item Ability to be implemented on no fewer than 28 devices
\end{itemize}

\section{Operating Environment}
SCADA systems are often located in extremely hostile environments for electronic devices.  In these systems hardware can be exposed to a variety of different physical threats that would impact the performance and safety of the device.  These threats include extreme temperatures, vibrations, dust and extreme voltages.  For Aliant’s purpose the main concerns will be high temperatures and dust particles as they will be operating in power plant substations and coal mines.  To account for these situations we chose to use a standard raspberry pi as our main hardware.  The benefits of the Raspberry Pi re that is low cost, low maintenance fairly durable and easily replaceable if something were to happen to it.  There are also several cases readily available for a low price to help further ruggedize the Pi.

\section{Ansible}
Ansible is a common tool used by IT personnel in order to simplify the management of network devices.  Being able to ensure that all devices located on a network are up to date is a major factor when dealing with security and general operation.  Ansible makes this process easy by using the following features:

\begin{itemize}
	\item Remote automated setup
	\item Device provisioning
	\item Synchronized machine updates
	\item Individual device management
\end{itemize}

\section{Vagrant}
Vagrant is a tool that uses Virtual Box to build and test virtual development environments.  By simplifying the process of setting up a test environment Vagrant makes writing and testing modules within the network much quicker.  This quick setup allows for many features in the development process take place more quickly and much more efficiently.  Some of the added benefits of Vagrant are:

\begin{itemize}
	\item Expedited testing environment
	\item System wide connectivity testing
	\item Shortened development time
\end{itemize}

\section{Splunk}
TODO

\section{Go Lang}
TODO

\section{Technical Details}
TODO

Details of each function module
For software modules: programming languages, libraries, development tools and environment.

Not sure if we need to add this section since the tools we used have been defined

\section{Testing}
TODO
